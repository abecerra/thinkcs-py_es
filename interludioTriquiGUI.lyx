#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package none
\inputencoding utf8
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
LyX source for textbook 
\begin_inset Quotes eld
\end_inset

How to think like a computer scientist'' 
\end_layout

\begin_layout Plain Layout
Copyright (c) 2001 Allen B.
 Downey, Jeffrey Elkner, and Chris Meyers.
\end_layout

\begin_layout Plain Layout
Permission is granted to copy, distribute and/or modify this document under
 the terms of the GNU Free Documentation License, Version 1.1 or any later
 version published by the Free Software Foundation; with the Invariant Sections
 being "Contributor List", with no Front-Cover Texts, and with no Back-Cover
 Texts.
 A copy of the license is included in the section entitled "GNU Free Documentati
on License".
\end_layout

\begin_layout Plain Layout
This distribution includes a file named fdl.lyx that contains the text of
 the GNU Free Documentation License.
 If it is missing, you can obtain it from www.gnu.org or by writing to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 02111-1307, USA.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Triqui con interfaz gráfica 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "triqui-kivy"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
Triqui
\end_layout

\end_inset


\end_layout

\begin_layout Section
Motivación
\end_layout

\begin_layout Standard
En el capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:inter1:triqui"

\end_inset

 desarrollamos un juego de triqui completo para integrar varios conceptos
 de programación.
 Ahora, para integrar varios conceptos de programación con objetos haremos
 casi lo mismo, construiremos un triqui con interfaz gráfica de usuario
\end_layout

\begin_layout Standard
El programa utiliza la biblioteca Kivy, que permite realizar interfaces
 gráficas que corran en celulares, tablets (con pantallas sensibles al tacto)
 y computadores tradicionales (corriendo MacOS X, Windows y Linux).
 Hay que conseguir el instalador de:
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

 http://kivy.org
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los archivos triqui0.py a triqui8.py están en:
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://cic.javerianacali.edu.co/~abecerra/files/triqui-kivy.zip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para comprender el capítulo hay que ejecutar cada versión del programa a
 medida que se avanza en la lectura.
 En las secciones a continuación se discuten los fragmentos del programa
 a medida que se van agregando, cada fragmento tiene el nombre del archivo
 en que se introdujo como comentario inicial.
\end_layout

\begin_layout Section
Ganar y empatar
\end_layout

\begin_layout Standard
Para empezar tomamos el código final del triqui desarrollado en el capítulo
 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:inter1:triqui"

\end_inset

 y lo convertimos en un módulo que nos permite verificar si alguien gana
 el juego o si hay un empate.
 El proceso es sencillo: eliminamos todo el código que no tenga que ver
 con verificar quien gana o si hay empate, tomando 
\family typewriter
triqui9.py
\family default
 y para transformarlo en 
\family typewriter
validar.py
\family default
, un módulo con 9 funciones: crear, ganaDiagonal1, ganaDiagonal2, ganaFila,
 ganaHorizontal, ganaColumna, ganaVertical, gana y empate.
 Mas adelante lo importaremos, para reutilizar el código.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
reutilización
\end_layout

\end_inset


\end_layout

\begin_layout Section
Programación orientada a eventos
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Programación orientada a eventos
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En muchas bibliotecas gráficas como kivy existe un gran ciclo que procesa
 los eventos generados a través del teclado, apuntador o la pantalla sensible
 al tacto.
 Este ciclo es infinito, pero se le hace un break cuando se cierra la ventana
 de la aplicación.
 En la programación orientada a eventos debemos acostumbrarnos a varias
 cosas.
\end_layout

\begin_layout Standard
Primero, el flujo del programa está determinado por lo que haga el usuario
 con los elementos gráficos de la pantalla.
 Kivy procesará cada evento (click, tecla digitada) de manera predeterminada,
 por ejemplo cerrar la ventana hará un break en el gran ciclo.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
evento
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Segundo, las bibliotecas como Kivy se encargan de redibujar automáticamente
 partes de la ventana cuando otra ventana se pase por encima, o cuando se
 cambie de tamaño.
\end_layout

\begin_layout Standard
Nuestro primer programa importa lo que necesita de kivy:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui0.py
\end_layout

\begin_layout Verbatim

import kivy
\end_layout

\begin_layout Verbatim

kivy.require('1.8.0')
\end_layout

\begin_layout Verbatim

from kivy.app import App
\end_layout

\begin_layout Verbatim

from kivy.uix.gridlayout import GridLayout
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

class Triqui(GridLayout):
\end_layout

\begin_layout Verbatim

    def __init__(self, **kwargs):
\end_layout

\begin_layout Verbatim

        super(Triqui, self).__init__(**kwargs)
\end_layout

\begin_layout Verbatim

   
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

class Programa(App):
\end_layout

\begin_layout Verbatim

    def build(self):
\end_layout

\begin_layout Verbatim

        self.title = 'Triqui'
\end_layout

\begin_layout Verbatim

        return Triqui()
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

if __name__ == '__main__':
\end_layout

\begin_layout Verbatim

    Programa().run()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El gran ciclo reside en la clase 
\family typewriter
App
\family default
 de Kivy, de la que heredamos la clase 
\family typewriter
Programa
\family default
.
 Cuando arranca el programa, al ejecutar 
\family typewriter
run()
\family default
 se corre este gran ciclo que procesa eventos.
\end_layout

\begin_layout Standard
El método build de programa retorna un objeto Triqui, que es nuestra ventana.
 La clase Triqui hereda de GridLayout, una ventana que contiene elementos
 en disposición de cuadrícula (como una matriz).
 El método 
\family typewriter
init
\family default
 de Triqui llama al médodo 
\family typewriter
init
\family default
 de la clase madre y le pasa una lista con un número de argumentos variable
 (**kwargs).
\end_layout

\begin_layout Standard
Por ahora nuestra ventana, instancia de la clase 
\family typewriter
Triqui
\family default
, está vacía.
\end_layout

\begin_layout Section
Widgets
\end_layout

\begin_layout Standard
Las ventanas suelen tener muchos elementos gráficos como menús, botones,
 paneles entre otros.
 En bibliotecas como kivy se llaman widgets.
 Por ejemplo, un botón es un tipo de widget que se define en la clase 
\family typewriter
Button
\family default
.
\end_layout

\begin_layout Standard
Como el flujo de los programas gráficos no está determinado por el programador,
 sino por el usuario al interactuar con los widgets de la ventana, el mecanismo
 que se utiliza para reaccionar ante los eventos es el de registrar métodos
 que serán invocados automáticamente por el gran ciclo.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui1.py
\end_layout

\begin_layout Verbatim

class Triqui(GridLayout):
\end_layout

\begin_layout Verbatim

    def __init__(self, **kwargs):
\end_layout

\begin_layout Verbatim

        super(Triqui, self).__init__(**kwargs)
\end_layout

\begin_layout Verbatim

        self.add_widget(Button(font_size=100, 
\end_layout

\begin_layout Verbatim

                        on_press=self.boton_presionado))
\end_layout

\begin_layout Verbatim

    
\end_layout

\begin_layout Verbatim

    def boton_presionado(self, w):
\end_layout

\begin_layout Verbatim

        pass
\end_layout

\begin_layout Verbatim

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los widgets se agregan a una ventana mediante el método 
\family typewriter
add_widget
\family default
.
 Aquí agregamos un botón y registramos un método que responde al evento
 de presionarlo (
\family typewriter
on_press
\family default
).
 Por ahora el método no hace nada.
\end_layout

\begin_layout Section
El Triqui
\end_layout

\begin_layout Standard
A continuación, definimos la geometría de la ventana como una matriz de
 3 filas y 3 columnas en la que cada elemento es un botón.
 Ahora, en el método 
\family typewriter
boton_presionado
\family default
 vamos a mostrar un cuadro de diálogo que muestra un texto sencillo.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui2.py
\end_layout

\begin_layout Verbatim

class Triqui(GridLayout):
\end_layout

\begin_layout Verbatim

    def __init__(self, **kwargs):
\end_layout

\begin_layout Verbatim

        super(Triqui, self).__init__(**kwargs)
\end_layout

\begin_layout Verbatim

        self.cols = 3
\end_layout

\begin_layout Verbatim

        self.rows = 3
\end_layout

\begin_layout Verbatim

        for i in range(3):
\end_layout

\begin_layout Verbatim

            for j in range(3):
\end_layout

\begin_layout Verbatim

                self.add_widget(Button(font_size=100, 
\end_layout

\begin_layout Verbatim

                                on_press=self.boton_presionado))
\end_layout

\begin_layout Verbatim

        
\end_layout

\begin_layout Verbatim

    def boton_presionado(self, w):
\end_layout

\begin_layout Verbatim

        MostrarMensaje("Titulo","Presionaste una casilla")
\end_layout

\begin_layout Verbatim

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
MostrarMensaje
\family default
 es una clase que heredamos de 
\family typewriter
PopUp
\family default
, la clase que tiene kivy para cuadros de diálogo:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui2.py
\end_layout

\begin_layout Verbatim

class MostrarMensaje(Popup): 
\end_layout

\begin_layout Verbatim

    def __init__(self, titulo, mensaje, **kwargs):
\end_layout

\begin_layout Verbatim

        self.size_hint_x = self.size_hint_y = .5
\end_layout

\begin_layout Verbatim

        self.title = titulo
\end_layout

\begin_layout Verbatim

        super(MostrarMensaje, self).__init__(**kwargs)
\end_layout

\begin_layout Verbatim

        self.add_widget(Button(text=mensaje, 
\end_layout

\begin_layout Verbatim

                        on_press=lambda x:self.dismiss()))
\end_layout

\begin_layout Verbatim

        self.open()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El cuadro de diálogo tiene un título y un botón que, al ser presionado,
 cierra todo el cuadro.
\end_layout

\begin_layout Section
Jugando por turnos
\end_layout

\begin_layout Standard
Como el flujo de ejecución depende de los usuarios, vamos a llevar pista
 en el programa de quien tiene el turno de juego con un atributo en la clase
 Triqui.
 Hay que crear el atributo en el método de inicialización y modificarlo
 en cada jugada.
 El 
\family typewriter
turno
\family default
 será 'O' para el primer jugador y 'X' para el segundo.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui3.py
\end_layout

\begin_layout Verbatim

class Triqui(GridLayout):
\end_layout

\begin_layout Verbatim

    def __init__(self, **kwargs):
\end_layout

\begin_layout Verbatim

        super(Triqui, self).__init__(**kwargs)
\end_layout

\begin_layout Verbatim

        self.cols = 3
\end_layout

\begin_layout Verbatim

        self.rows = 3
\end_layout

\begin_layout Verbatim

        for i in range(3):
\end_layout

\begin_layout Verbatim

            for j in range(3):
\end_layout

\begin_layout Verbatim

                self.add_widget(Button(font_size=100, 
\end_layout

\begin_layout Verbatim

                  on_press=self.boton_presionado, text=' '))
\end_layout

\begin_layout Verbatim

        self.turno = 'O'
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def boton_presionado(self, w):
\end_layout

\begin_layout Verbatim

        if w.text != ' ':
\end_layout

\begin_layout Verbatim

            MostrarMensaje('Error!', "Ya se ha jugado en esa casilla!")
\end_layout

\begin_layout Verbatim

            return
\end_layout

\begin_layout Verbatim

        if self.turno == 'O':
\end_layout

\begin_layout Verbatim

            w.text =  'O'
\end_layout

\begin_layout Verbatim

            self.turno = 'X'
\end_layout

\begin_layout Verbatim

        else:
\end_layout

\begin_layout Verbatim

            w.text = 'X'
\end_layout

\begin_layout Verbatim

            self.turno = 'O'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cuando se presiona un botón se verifica si la casilla está vacía para poder
 jugar en ella.
 Si no es así se cambia el texto del botón y se cambia el turno para el
 otro jugador.
 Observe que en el método de inicialización de 
\family typewriter
Triqui
\family default
 al texto de todos los botones se le asigna un espacio.
\end_layout

\begin_layout Section
Reutilización
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
reutilización
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Agregamos un botón que tiene propiedades para registrar la fila y la columna,
 heredando de la clase 
\family typewriter
Button
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui4.py
\end_layout

\begin_layout Verbatim

class Boton(Button):
\end_layout

\begin_layout Verbatim

    fila = NumericProperty(0)
\end_layout

\begin_layout Verbatim

    columna = NumericProperty(0)
\end_layout

\begin_layout Verbatim

    
\end_layout

\begin_layout Verbatim

    def __init__(self, **kwargs):      
\end_layout

\begin_layout Verbatim

        super(Boton, self).__init__(**kwargs)
\end_layout

\begin_layout Verbatim

        self.font_size=100
\end_layout

\begin_layout Verbatim

        self.text=' '
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Esto nos permite pasar el estado de los botones a una matriz con el siguiente
 método de la clase 
\family typewriter
Triqui
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui4.py
\end_layout

\begin_layout Verbatim

    def botones_a_matriz(self,tablero):
\end_layout

\begin_layout Verbatim

        for i in self.children:
\end_layout

\begin_layout Verbatim

            f = i.fila
\end_layout

\begin_layout Verbatim

            c = i.columna
\end_layout

\begin_layout Verbatim

            self.tablero[f][c]=i.text
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Así podremos reutilizar el módulo 
\family typewriter
validar
\family default
, creando la matriz que lleva el estado del juego :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui4.py
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

from validar import *
\end_layout

\begin_layout Verbatim

    def __init__(self, **kwargs):
\end_layout

\begin_layout Verbatim

        super(Triqui, self).__init__(**kwargs)
\end_layout

\begin_layout Verbatim

        self.cols = 3
\end_layout

\begin_layout Verbatim

        self.rows = 3
\end_layout

\begin_layout Verbatim

        for i in range(3):
\end_layout

\begin_layout Verbatim

            for j in range(3):
\end_layout

\begin_layout Verbatim

                self.add_widget(Boton(on_press=self.boton_presionado,
\end_layout

\begin_layout Verbatim

                       fila=i,columna=j))
\end_layout

\begin_layout Verbatim

        self.turno = 'O'
\end_layout

\begin_layout Verbatim

        self.tablero = crear()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ahora estamos en condiciones de poner valores a la matriz cada vez que se
 halla realizado una jugada:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui5.py
\end_layout

\begin_layout Verbatim

    def boton_presionado(self, w):
\end_layout

\begin_layout Verbatim

        if w.text != ' ':
\end_layout

\begin_layout Verbatim

            MostrarMensaje('Error!', "Ya se ha jugado en esa casilla!")
\end_layout

\begin_layout Verbatim

            return
\end_layout

\begin_layout Verbatim

        else:
\end_layout

\begin_layout Verbatim

            if self.turno == 'O':
\end_layout

\begin_layout Verbatim

                w.text =  'O'                
\end_layout

\begin_layout Verbatim

                self.turno = 'X'
\end_layout

\begin_layout Verbatim

                self.botones_a_matriz()
\end_layout

\begin_layout Verbatim

                if gana("O",self.tablero):
\end_layout

\begin_layout Verbatim

                    MostrarMensaje("Fin", "Gana el jugador O")
\end_layout

\begin_layout Verbatim

            else:
\end_layout

\begin_layout Verbatim

                # Muy similar para el otro jugador!
\end_layout

\end_inset


\end_layout

\begin_layout Section
Reset
\end_layout

\begin_layout Standard
Podemos reiniciar el juego cada vez que un jugador gane, mediante la creación
 del siguiente método de 
\family typewriter
Triqui
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui6.py
\end_layout

\begin_layout Verbatim

   def reset(self):
\end_layout

\begin_layout Verbatim

        for i in self.children:
\end_layout

\begin_layout Verbatim

            i.text = ' '
\end_layout

\begin_layout Verbatim

        self.turno = 'O'
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ahora lo llamamos cada vez que un jugador gana, así el tablero de juego
 quedará limpio para que se inicie otra partida.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui6.py
\end_layout

\begin_layout Verbatim

    def boton_presionado(self, w):
\end_layout

\begin_layout Verbatim

        # Todo lo anterior igual
\end_layout

\begin_layout Verbatim

        else:
\end_layout

\begin_layout Verbatim

                w.text = 'X'
\end_layout

\begin_layout Verbatim

                self.turno = 'O'
\end_layout

\begin_layout Verbatim

                self.botones_a_matriz()
\end_layout

\begin_layout Verbatim

                if gana("X",self.tablero):
\end_layout

\begin_layout Verbatim

                    MostrarMensaje("Fin", "Gana el jugador X")
\end_layout

\begin_layout Verbatim

                    self.reset()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aprovechando al métod reset, añadimos el chequeo de empates entre los dos
 jugadores:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui7.py
\end_layout

\begin_layout Verbatim

    def boton_presionado(self, w):
\end_layout

\begin_layout Verbatim

        # Todo lo anterior igual
\end_layout

\begin_layout Verbatim

            if empate(self.tablero):
\end_layout

\begin_layout Verbatim

                MostrarMensaje("Fin", "Empate!")
\end_layout

\begin_layout Verbatim

                self.reset()
\end_layout

\end_inset


\end_layout

\begin_layout Section
Reestructurando, otra vez
\end_layout

\begin_layout Standard
Otra vez tenemos código parecido para revisar el estado del juego con los
 dos jugadores que es mejor consolidar en una función para mejorar la calidad
 del programa.
 Para esto definimos el método revisar, que:
\end_layout

\begin_layout Itemize
Si el jugador actual gana, muestra el mensaje y resetea.
\end_layout

\begin_layout Itemize
Si hay empate, muestra el mensaje y resetea.
\end_layout

\begin_layout Itemize
Si nadie gana y no hay empate, pasa el turno al otro jugador.
 
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui8.py
\end_layout

\begin_layout Verbatim

  def revisar(self):          
\end_layout

\begin_layout Verbatim

        if gana(self.turno,self.tablero):
\end_layout

\begin_layout Verbatim

            mensaje = "Gana el jugador "+self.turno+"."
\end_layout

\begin_layout Verbatim

            MostrarMensaje("Fin", mensaje)
\end_layout

\begin_layout Verbatim

            self.reset()
\end_layout

\begin_layout Verbatim

        elif empate(self.tablero):
\end_layout

\begin_layout Verbatim

            MostrarMensaje("Fin", "Empate!")
\end_layout

\begin_layout Verbatim

            self.reset()
\end_layout

\begin_layout Verbatim

        else:
\end_layout

\begin_layout Verbatim

            self.turno = self.otro()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Que depende del método otro:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui8.py
\end_layout

\begin_layout Verbatim

    def otro(self):
\end_layout

\begin_layout Verbatim

        if self.turno == 'O':
\end_layout

\begin_layout Verbatim

            return 'X'
\end_layout

\begin_layout Verbatim

        else:
\end_layout

\begin_layout Verbatim

            return 'O'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Así terminamos con un programa que tiene en total 4 clases, con 9 métodos
 distribuidos en ellas, además de las 9 funciones del módulo validar.
 Tiene 96 líneas de código en triqui9.py y 66 en validar, para un total de
 162.
\end_layout

\begin_layout Standard
Ilustra algo que siempre pasa con los programas textuales, cuando se convierten
 a gráficos se aumenta el código substancialmente.
 La ventaja, aparte de la estética, es que el Triqui con la biblioteca kivy
 puede ejecutarse en Linux, Windows, Mac OS X, Android y iOS (el sistema
 operativo de los teléfonos iphone y de los tablets ipad).
\end_layout

\begin_layout Standard
Por ejemplo, el paquete para Android del triqui puede descargarse de:
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://cic.javerianacali.edu.co/~abecerra/files/KivyTriquiABe-1.1.0-debug.apk
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para instalarlo en un smartphone o tablet.
\end_layout

\begin_layout Section
Resumen
\end_layout

\begin_layout Description
triqui0.py: crea una ventana vacía 
\end_layout

\begin_layout Description
triqui1.py: Agrega un botón a la ventana (se ve feo!) 
\end_layout

\begin_layout Description
triqui2.py: Agrega 9 botones para formar el tablero del triqui 
\end_layout

\begin_layout Description
triqui3.py: Permite jugar a los dos jugadores sin ningún chequeo 
\end_layout

\begin_layout Description
triqui4.py: Agrega una clase heredada de Button para llevar fila y columna
 
\end_layout

\begin_layout Description
triqui5.py: Cada vez que se juega se copia el estado de los botones a una
 matriz 
\end_layout

\begin_layout Description
triqui6.py: Se valida si los jugadores ganan el juego con el código del triqui
 viejo y se resetea el juego.
 
\end_layout

\begin_layout Description
triqui7.py: Se revisa si hay empate, si lo hay, se resetea el juego.
 
\end_layout

\begin_layout Description
triqui8.py: Se mejora el código evitando la duplicación.
 
\end_layout

\begin_layout Section
Glosario
\end_layout

\begin_layout Description
Evento: Acción generada por el usuario de una aplicación gráfica.
\end_layout

\begin_layout Description
Widget: Elemento de una aplicación gráfica que se coloca en una ventana.
 Hay botones, paneles, barras deslizadoras, áreas de texto, entre otras
 clases de widgets.
\end_layout

\begin_layout Section
Ejercicios
\end_layout

\begin_layout Enumerate
Modifique el triqui para que el computador juegue automáticamente, seleccionando
 una casilla vacía al azar.
\end_layout

\begin_layout Enumerate
Agregue un sonido cada vez que se haga una jugada válida y otro sonido de
 error para cuando el jugador seleccione una casilla en la que ya se ha
 jugado.
\end_layout

\begin_layout Enumerate
Modifique el triqui para que tenga un menú gráfico de entrada en el que
 se pueda escoger entre dos modalidades: 1 jugador contra el computador,
 2 jugadores entre si por turnos y 3, salir del programa.
 Ahora, cada vez que termine una partida el flujo de ejecución del programa
 debe volver al menú.
\end_layout

\end_body
\end_document
