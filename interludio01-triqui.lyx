#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package none
\inputencoding utf8
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
LyX source for textbook 
\begin_inset Quotes eld
\end_inset

How to think like a computer scientist'' 
\end_layout

\begin_layout Plain Layout
Copyright (c) 2001 Allen B.
 Downey, Jeffrey Elkner, and Chris Meyers.
\end_layout

\begin_layout Plain Layout
Permission is granted to copy, distribute and/or modify this document under
 the terms of the GNU Free Documentation License, Version 1.1 or any later
 version published by the Free Software Foundation; with the Invariant Sections
 being "Contributor List", with no Front-Cover Texts, and with no Back-Cover
 Texts.
 A copy of the license is included in the section entitled "GNU Free Documentati
on License".
\end_layout

\begin_layout Plain Layout
This distribution includes a file named fdl.lyx that contains the text of
 the GNU Free Documentation License.
 If it is missing, you can obtain it from www.gnu.org or by writing to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 02111-1307, USA.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Interludio 1: Triqui 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "cap:inter1:triqui"

\end_inset

 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Triqui
\end_layout

\end_inset


\end_layout

\begin_layout Section
Motivación
\end_layout

\begin_layout Standard
Con el fin de poner en práctica los conceptos de los capítulos anteriores
 vamos a desarrollar un sencillo juego de triqui para dos jugadores.
 La idea es seguir un desarrollo iterativo que toma un pequeño programa
 y lo convierte, poco a poco, en un juego de triqui con toda la funcionalidad
 esperada.
\end_layout

\begin_layout Standard
El código fuente tiene diez versiones, comenzando desde 
\family typewriter
triqui0.py
\family default
 hasta 
\family typewriter
triqui9.py
\family default
.
 Los diez programas puede descargarse de:
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

 http://cic.javerianacali.edu.co/~abecerra/files/triqui.zip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para comprender el capítulo hay que ejecutar cada versión del programa a
 medida que se avanza en la lectura.
 En las secciones a continuación se discuten los fragmentos del programa
 a medida que se van agregando, cada fragmento tiene el nombre del archivo
 en que se introdujo como comentario inicial.
\end_layout

\begin_layout Section
Estructuras de datos
\end_layout

\begin_layout Standard
El código fuente de un programa extenso puede ser difícil de comprender.
 Esta es la razón por la que lo primero que se debe explicar de un software
 son sus estructuras de datos: las variables, listas, matrices que usa para
 representar la información.
\end_layout

\begin_layout Standard
En nuestro triqui, el tablero de juego es una matriz de 3 filas y 3 columnas
 que se almacena en una lista de listas usando la representación usual del
 capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:listas"

\end_inset

 en la que cada fila de la matriz es una sublista.
\end_layout

\begin_layout Standard
Todos los elementos de la matriz serán caracteres de texto con la convención
 que sigue.
 Si el elemento de la matriz es:
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

' ' (esto es el caracter espacio):
\end_layout

\end_inset

 nadie ha jugado en esa casilla.
 
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

'O': 
\end_layout

\end_inset

 el primer jugador jugó en esa casilla.
 
\end_layout

\begin_layout Description
'X': el segundo jugador jugó en esa casilla.
 
\end_layout

\begin_layout Section
Inicio
\end_layout

\begin_layout Standard
Con la convención anterior, nuestro triqui empieza humildemente:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui0.py
\end_layout

\begin_layout Verbatim

def crear():
\end_layout

\begin_layout Verbatim

    m =  [ [' ',' ',' '],
\end_layout

\begin_layout Verbatim

           [' ',' ',' '],
\end_layout

\begin_layout Verbatim

           [' ',' ',' '] ]
\end_layout

\begin_layout Verbatim

    return m
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

def imprimir(tablero):
\end_layout

\begin_layout Verbatim

    for i in range(3):
\end_layout

\begin_layout Verbatim

        print "|",
\end_layout

\begin_layout Verbatim

        for j in range(3):
\end_layout

\begin_layout Verbatim

            print tablero[i][j],
\end_layout

\begin_layout Verbatim

        print "|"
\end_layout

\begin_layout Verbatim

        
\end_layout

\begin_layout Verbatim

triqui = crear()
\end_layout

\begin_layout Verbatim

imprimir(triqui)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ahora podemos agregar un ciclo para jugar, sencillo, con un solo jugador:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui1.py
\end_layout

\begin_layout Verbatim

while True:
\end_layout

\begin_layout Verbatim

    print "Juegue jugador O"
\end_layout

\begin_layout Verbatim

    f = input("fila? ")
\end_layout

\begin_layout Verbatim

    c = input("columna? ")
\end_layout

\begin_layout Verbatim

    triqui[f][c] = "O"
\end_layout

\begin_layout Verbatim

    imprimir(triqui)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Agregar al segundo jugador es casi idéntico al fragmento anterior y está
 en el archivo triqui2.py.
\end_layout

\begin_layout Section
¿Quien gana?
\end_layout

\begin_layout Standard
Para verificar si un jugador gana la partida, vamos a empezar por las diagonales
, implementando un ciclo para la verificar si alguien gana en la diagonal
 principal:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui3.py
\end_layout

\begin_layout Verbatim

def ganaDiagonal1(jugador,tablero):
\end_layout

\begin_layout Verbatim

    for i in range(3):
\end_layout

\begin_layout Verbatim

        if tablero[i][i]!=jugador:
\end_layout

\begin_layout Verbatim

            return False
\end_layout

\begin_layout Verbatim

    return True
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La idea es que si encuentra algo diferente del símbolo del jugador ('X'
 ó 'O'), retorna False.
 Sino, retorna True.
 La otra diagonal requiere mas trabajo, usamos el hecho de que 
\family typewriter
tablero[i][2-i]
\family default
 va dando los elementos de la segunda diagonal para i de 0 a 2.
 ¡Verifiquelo!
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui3.py
\end_layout

\begin_layout Verbatim

def ganaDiagonal2(jugador,tablero):
\end_layout

\begin_layout Verbatim

    for i in range(3):
\end_layout

\begin_layout Verbatim

        if tablero[i][2-i]!=jugador:
\end_layout

\begin_layout Verbatim

            return False
\end_layout

\begin_layout Verbatim

    return True
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Falta llamar las funciones en el ciclo del juego, y si alguien gana, terminamos
 el juego con la sentencia 
\family typewriter
break
\family default
.
 Por ejemplo, para el primer jugador:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui3.py
\end_layout

\begin_layout Verbatim

print "Juegue jugador O"
\end_layout

\begin_layout Verbatim

    f = input("fila? ")
\end_layout

\begin_layout Verbatim

    c = input("columna? ")
\end_layout

\begin_layout Verbatim

    triqui[f][c] = "O"
\end_layout

\begin_layout Verbatim

    imprimir(triqui)
\end_layout

\begin_layout Verbatim

    if ganaDiagonal1("O",triqui) or ganaDiagonal2("O",triqui):
\end_layout

\begin_layout Verbatim

        print "Gana el jugador O!!!!"
\end_layout

\begin_layout Verbatim

        break
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Agregar las funciones para verificar si alguien gana por alguna fila es
 sencillo.
 Seguimos la misma estructura de las diagonales, creando una función 
\family typewriter
ganaFila
\family default
, que verifica si el jugador gana en una de las filas del tablero.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui4.py
\end_layout

\begin_layout Verbatim

def ganaFila(fila,jugador,tablero):
\end_layout

\begin_layout Verbatim

    """Chequea si el jugador gana en la fila dada"""
\end_layout

\begin_layout Verbatim

    for i in range(3):
\end_layout

\begin_layout Verbatim

        if tablero[fila][i]!=jugador:
\end_layout

\begin_layout Verbatim

            return False
\end_layout

\begin_layout Verbatim

    return True
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La función anterior debe ser llamada para todas las filas:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui4.py
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

def ganaHorizontal(jugador,tablero):
\end_layout

\begin_layout Verbatim

    for i in range(3):
\end_layout

\begin_layout Verbatim

        if ganaFila(i,jugador,tablero):
\end_layout

\begin_layout Verbatim

            return True
\end_layout

\begin_layout Verbatim

    return False
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las funciones para chequear las columnas son muy parecidas.
 Para llamarlas modificamos el ciclo del juego.
 Por ejemplo, para el jugador 'X':
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui4.py
\end_layout

\begin_layout Verbatim

while True:
\end_layout

\begin_layout Verbatim

    print "Juegue jugador X"
\end_layout

\begin_layout Verbatim

    f = input("fila? ")
\end_layout

\begin_layout Verbatim

    c = input("columna? ")
\end_layout

\begin_layout Verbatim

    triqui[f][c] = "X"
\end_layout

\begin_layout Verbatim

    imprimir(triqui)
\end_layout

\begin_layout Verbatim

    if ganaDiagonal1("X",triqui) or ganaDiagonal2("X",triqui) or 
\end_layout

\begin_layout Verbatim

       ganaHorizontal("X",triqui) or ganaVertical("X",triqui):
\end_layout

\begin_layout Verbatim

        print "Gana el jugador X!!!!"
\end_layout

\begin_layout Verbatim

        break
\end_layout

\end_inset


\end_layout

\begin_layout Section
Reestructurando el código
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
reestructuración
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Casi siempre que se está desarrollando un programa y uno encuentra que está
 copiando y pegando código para hacer pequeños cambios vale la pena analizar
 si se pueden crear funciones para evitar problemas futuros.
 Una función correcta, que se llama desde varias partes del programa es
 más fácil de mantener que una serie de porciones de código parecidas, pero
 con cambios, que se han copiado, pegado y modificado.
\end_layout

\begin_layout Standard
En el triqui podemos observar que el código dentro del ciclo para el jugador
 'O' y el 'X' es muy parecido.
 Así que lo podemos poner en una función que tenga como parámetro el símbolo
 del jugador:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui5.py
\end_layout

\begin_layout Verbatim

def jugar(jugador,tablero):
\end_layout

\begin_layout Verbatim

    print "Juegue jugador ", jugador
\end_layout

\begin_layout Verbatim

    f = input("fila? ")
\end_layout

\begin_layout Verbatim

    c = input("columna? ")
\end_layout

\begin_layout Verbatim

    tablero[f][c] = jugador
\end_layout

\begin_layout Verbatim

    imprimir(triqui)
\end_layout

\begin_layout Verbatim

    diag = ganaDiagonal1(jugador,tablero) or ganaDiagonal2(jugador,tablero)
\end_layout

\begin_layout Verbatim

    linea = ganaHorizontal(jugador,tablero) or ganaVertical(jugador,tablero)
\end_layout

\begin_layout Verbatim

    return  diag or linea
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Con este cambio nuestro ciclo de juego es más pequeño, y el programa es
 más fácil de mantener:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui5.py
\end_layout

\begin_layout Verbatim

while True:
\end_layout

\begin_layout Verbatim

    if jugar("O",triqui):
\end_layout

\begin_layout Verbatim

        print "Gana el jugador O !!!!"
\end_layout

\begin_layout Verbatim

        break
\end_layout

\begin_layout Verbatim

    if jugar("X",triqui):
\end_layout

\begin_layout Verbatim

        print "Gana el jugador X !!!!"
\end_layout

\begin_layout Verbatim

        break
\end_layout

\end_inset


\end_layout

\begin_layout Section
Validaciones
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
validación
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los usuarios pueden cometer errores, por esta razón los programas deben
 revisar todos los datos que generan para ver si cumplen las condiciones
 para operar.
 El código que revisa una condición o restricción de este tipo se llama
 validación.
\end_layout

\begin_layout Standard
En el triqui podemos agregar validación al juego.
 Tanto 
\family typewriter
f
\family default
 como 
\family typewriter
c
\family default
,los valores que el usuario digita para jugar en una fila y columna deben
 ser enteros en el intervalo [0,2] para que podamos representarlos en la
 matriz de 3 filas y 3 columnas.
 Además, la casilla 
\family typewriter
tablero[f][c]
\family default
 debe estar vacía para que una jugada nueva pueda hacerse allí.
\end_layout

\begin_layout Standard
Estas validaciones pueden ponerse en un ciclo que le pida al jugador digitar
 los valores para f y c varias veces, hasta que sean correctos:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui6.py
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

def valido(n):
\end_layout

\begin_layout Verbatim

    return 0<=n<=2
\end_layout

\begin_layout Verbatim

    
\end_layout

\begin_layout Verbatim

def jugar(jugador,tablero):
\end_layout

\begin_layout Verbatim

    while True:     
\end_layout

\begin_layout Verbatim

        print "Juegue jugador ", jugador
\end_layout

\begin_layout Verbatim

        f = input("fila? ")
\end_layout

\begin_layout Verbatim

        c = input("columna? ")
\end_layout

\begin_layout Verbatim

        if type(f)==type(c)==type(1) and valido(f) 
\end_layout

\begin_layout Verbatim

           and valido(c) and tablero[f][c]==' ':
\end_layout

\begin_layout Verbatim

            tablero[f][c] = jugador
\end_layout

\begin_layout Verbatim

            break      
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    imprimir(tablero)
\end_layout

\begin_layout Verbatim

    diag = ganaDiagonal1(jugador,tablero) or ganaDiagonal2(jugador,tablero)
\end_layout

\begin_layout Verbatim

    linea = ganaHorizontal(jugador,tablero) or ganaVertical(jugador,tablero)
\end_layout

\begin_layout Verbatim

    return  diag or linea
\end_layout

\end_inset


\end_layout

\begin_layout Section
Empates
\end_layout

\begin_layout Standard
Ahora agregamos una función para chequear si hay empate entre los jugadores.
 Esto sucede si el tablero está lleno, o sea que no hay ninguna casilla
 vacía (con el caracter ' '):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui7.py
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

def empate(tablero):
\end_layout

\begin_layout Verbatim

    for i in range(3):
\end_layout

\begin_layout Verbatim

        for j in range(3):
\end_layout

\begin_layout Verbatim

            if tablero[i][j]==' ':
\end_layout

\begin_layout Verbatim

                return False
\end_layout

\begin_layout Verbatim

    return True
\end_layout

\begin_layout Verbatim

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Llamamos a empate después de cada jugador: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui8.py
\end_layout

\begin_layout Verbatim

while True:
\end_layout

\begin_layout Verbatim

    if jugar("O",triqui):
\end_layout

\begin_layout Verbatim

        print "Gana el jugador O !!!!"
\end_layout

\begin_layout Verbatim

        break
\end_layout

\begin_layout Verbatim

    if empate(triqui):
\end_layout

\begin_layout Verbatim

        print "Empate !!!"
\end_layout

\begin_layout Verbatim

        break
\end_layout

\begin_layout Verbatim

    if jugar("X",triqui):
\end_layout

\begin_layout Verbatim

        print "Gana el jugador X !!!!"
\end_layout

\begin_layout Verbatim

        break
\end_layout

\begin_layout Verbatim

    if empate(triqui):
\end_layout

\begin_layout Verbatim

        print "Empate !!!"
\end_layout

\begin_layout Verbatim

        break
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Y también agregamos un mensaje de retroalimentación para el jugador cuando
 no ha escogido una casilla válida:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui8.py
\end_layout

\begin_layout Verbatim

def jugar(jugador,tablero):
\end_layout

\begin_layout Verbatim

    while True:     
\end_layout

\begin_layout Verbatim

        print "Juegue jugador ", jugador
\end_layout

\begin_layout Verbatim

        f = input("fila? ")
\end_layout

\begin_layout Verbatim

        c = input("columna? ")
\end_layout

\begin_layout Verbatim

        if type(f)==type(c)==type(1) and valido(f) 
\end_layout

\begin_layout Verbatim

           and valido(c) and tablero[f][c]==' ':
\end_layout

\begin_layout Verbatim

            tablero[f][c] = jugador
\end_layout

\begin_layout Verbatim

            break
\end_layout

\begin_layout Verbatim

        else:
\end_layout

\begin_layout Verbatim

            print "Posición inválida!"
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    imprimir(triqui)
\end_layout

\begin_layout Verbatim

    diag = ganaDiagonal1(jugador,tablero) or ganaDiagonal2(jugador,tablero)
\end_layout

\begin_layout Verbatim

    linea = ganaHorizontal(jugador,tablero) or ganaVertical(jugador,tablero)
\end_layout

\begin_layout Verbatim

    return  diag or linea
\end_layout

\end_inset


\end_layout

\begin_layout Section
Reestructurando más
\end_layout

\begin_layout Standard
Podemos crear una función 
\family typewriter
gana
\family default
, fructífera, que nos permita que jugar sea mas pequeña:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui9.py
\end_layout

\begin_layout Verbatim

def gana(jugador,tablero):
\end_layout

\begin_layout Verbatim

    """ Analiza si el jugador gana la partida """
\end_layout

\begin_layout Verbatim

    diag = ganaDiagonal1(jugador,tablero) or ganaDiagonal2(jugador,tablero)
\end_layout

\begin_layout Verbatim

    linea = ganaHorizontal(jugador,tablero) or ganaVertical(jugador,tablero)
\end_layout

\begin_layout Verbatim

    return  diag or linea
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Con este cambio también ganamos algo: la verificación de quien gana el juego
 puede hacerse con una sola función en otro programa, por ejemplo uno con
 una interfaz gráfica de usuario.
\end_layout

\begin_layout Standard
Ahora, 
\family typewriter
gana
\family default
 se llama en el ciclo principal.
 Y todo esto se puede poner en la parte principal del programa:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Verbatim

# triqui9.py
\end_layout

\begin_layout Verbatim

if __name__ == '__main__':
\end_layout

\begin_layout Verbatim

    triqui = crear()
\end_layout

\begin_layout Verbatim

    imprimir(triqui)
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    while True:
\end_layout

\begin_layout Verbatim

        jugar("O",triqui)
\end_layout

\begin_layout Verbatim

        if gana("O",triqui):
\end_layout

\begin_layout Verbatim

            print "Gana el jugador O !!!!"
\end_layout

\begin_layout Verbatim

            break
\end_layout

\begin_layout Verbatim

        if empate(triqui):
\end_layout

\begin_layout Verbatim

            print "Empate !!!"
\end_layout

\begin_layout Verbatim

            break
\end_layout

\begin_layout Verbatim

        jugar("X",triqui)
\end_layout

\begin_layout Verbatim

        if gana("X",triqui):
\end_layout

\begin_layout Verbatim

            print "Gana el jugador X !!!!"
\end_layout

\begin_layout Verbatim

            break
\end_layout

\begin_layout Verbatim

        if empate(triqui):
\end_layout

\begin_layout Verbatim

            print "Empate !!!"
\end_layout

\begin_layout Verbatim

            break
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Asi terminamos con triqui9.py, un programa con 12 funciones y un ciclo de
 juego que tiene en total 124 líneas de código, ¡pero empezó como una simple
 impresión de una matriz vacía!
\end_layout

\begin_layout Section
Resumen
\end_layout

\begin_layout Description
triqui0.py: crea e imprime el tablero vacío 
\end_layout

\begin_layout Description
triqui1.py: permite que un solo jugador juegue por siempre 
\end_layout

\begin_layout Description
triqui2.py: permite que dos jugadores jueguen por siempre 
\end_layout

\begin_layout Description
triqui3.py: revisa si algun jugador gana en las diagonales 
\end_layout

\begin_layout Description
triqui4.py: revisa si algun jugador gana en filas o columnas 
\end_layout

\begin_layout Description
triqui5.py: evita la duplicación de código creando una función 'jugar' 
\end_layout

\begin_layout Description
triqui6.py: introduce un ciclo en 'jugar' para validar las jugadas 
\end_layout

\begin_layout Description
triqui7.py: introduce la verificación de empates en el juego 
\end_layout

\begin_layout Description
triqui8.py: llama a empate 2 veces en lugar de 1 y añade un mensaje al jugador
 
\end_layout

\begin_layout Description
triqui9.py: crea una función 'gana' para que 'jugar' sea mas pequeña y pone
 el ciclo del juego en la parte principal.
 
\end_layout

\begin_layout Section
Glosario
\end_layout

\begin_layout Description
validación: análisis de los datos que genera un usuario humano para que
 estén dentro de los límites de operación del software.
\end_layout

\begin_layout Description
reestructuración: reescritura de porciones del código para mejorar la calidad
 del programa.
 Por ejemplo, se puede mejorar la legibilidad del código, también se puede
 eliminar la redundancia.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
validación
\end_layout

\end_inset

 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
reestructuración
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Ejercicios
\end_layout

\begin_layout Enumerate
Modifique el triqui para que el computador juegue automáticamente, seleccionando
 una casilla vacía al azar.
\end_layout

\begin_layout Enumerate
Modifique el triqui para que tenga un menú de entrada en el que se pueda
 escoger entre dos modalidades: 1 jugador contra el computador, 2 jugadores
 entre si por turnos y 3, salir del programa.
 Ahora, cada vez que termine una partida el el flujo de ejecución del programa
 debe volver al menú.
\end_layout

\end_body
\end_document
